#!/bin/bash

## Enable kvm and virtual-network kernel
mknod /dev/kvm c 10 232
mkdir /dev/net
mknod /dev/net/tun c 10 200
test -f /etc/mtab || ln -s /proc/mounts /etc/mtab

## Save network config
IPADDR=$(ip addr ls dev eth0 | grep -w inet | awk '{print $2}')
ROUTER=$(ip route ls | grep ^default | awk '{print $3}')
echo $IPADDR > /.ipaddr
echo $ROUTER > /.router

## Delete container IP address from eth0
ip addr del $IPADDR dev eth0

## Add a new bridge interface linked to eth0
brctl addbr br0
brctl addif br0 eth0
ip link set br0 up

## Custom init script
INIT_CMD="$@"
if [ "$#" -eq 0 ]; then
    INIT_CMD="/bin/bash"
fi
cat > /sbin/init_inside_kvm <<EOF
#!/bin/sh

mount -o rw,remount /
hostname \$(cat /etc/hostname)
ip addr add \$(cat /.ipaddr) dev eth0
ip link set lo up
ip link set eth0 up
ip route add default via \$(cat /.router)
rm -f /.ipaddr /.router

exec $INIT_CMD
EOF
chmod +x /sbin/init_inside_kvm

## Custom KVM network script
mkdir -p /etc/kvm
cat > /etc/kvm/kvm-ifup <<EOF
#!/bin/sh
brctl addif br0 \$1
ip link set \$1 up
EOF
chmod +x /etc/kvm/kvm-ifup

ROOTFS=/
KERNEL=$(echo /boot/vmlinuz* | tr ' ' '\n' | head -n 1)
INITRD=$(echo /boot/initrd* | tr ' ' '\n' | head -n 1)
CMDLINE="root=guestroot rootfstype=9p rootflags=trans=virtio,version=9p2000.L rw"
CMDLINE="console=ttyS0 quiet panic=0 $CMDLINE"
CMDLINE="init=/sbin/init_inside_kvm $CMDLINE"

echo "+++ Starting kvm."
kvm -nographic -no-reboot -m 512 \
    -append "$CMDLINE" -kernel "$KERNEL" -initrd "$INITRD" \
    -fsdev local,id=fsdev0,path="$ROOTFS",security_model=none \
    -device virtio-9p-pci,fsdev=fsdev0,mount_tag=guestroot \
    -device virtio-net,netdev=net0 -netdev tap,id=net0,script=/etc/kvm/kvm-ifup,downscript=no
echo ""
echo "+++ Exited kvm."
