#==============================================================================
# vim: softtabstop=2 shiftwidth=2 expandtab fenc=utf-8 cc=81 tw=80
#==============================================================================
#
# RECIPE: debian
#
# DESCRIPTION: Build a debian wheezy appliance using Docker.
#
# TEMPLATE: debian7_docker
#
#==============================================================================

---
# Loads some helpful aliases
aliases: defaults.yaml
# Enables qcow2 checkpoint
checkpoint: docker.yaml
#== Global variables use by Kameleon engine and the steps
global:
  ## User varibales : used by the recipe
  cachedir: $$kameleon_cwd/cache
  user_name: docker
  arch: amd64

  distrib: debian
  release: wheezy
  docker_image: kameleon-$${distrib}-$${release}
  # DNS servers : opendns
  docker_dns: 208.67.222.222

  include_steps:
    - $$distrib/$$release
    - $$distrib

  out_context:
    cmd: bash
    workdir: $$kameleon_cwd

  # Shell session that allows us to connect to the building machine in order to
  # configure it and setup additional programs
  ssh_options: -o StrictHostKeyChecking=no -o ForwardAgent=yes
  ssh_port: 44512
  insecure_ssh_key: $$kameleon_cwd/insecure_ssh_dsa_key
  in_context:
    cmd: LC_ALL=POSIX ssh $$ssh_options root@127.0.0.1 -p $$ssh_port -i $$insecure_ssh_key -t /bin/bash
    workdir: /

#== Bootstrap the new system and create the 'in_context'
bootstrap:
  - debootstrap:
    - release: $$release
    - arch: $$arch
    - repository: http://ftp.fr.debian.org/debian/
    - rootfs_archive: $$cachedir/$$distrib/$$release/$$arch/debootstrap.tar.gz
  - prepare_docker:
    - image: $$docker_image
    - dns: $$docker_dns
    - rootfs_archive: $$cachedir/$$distrib/$$release/$$arch/debootstrap.tar.gz
  - start_docker:
    - image: $$docker_image
    - dns: $$docker_dns
    - hostname: kameleon-$$distrib

#== Install and configuration steps
setup:
  # Install
  - software_install:
    - packages: >
        debian-keyring sudo less vim nano bash-completion apt-transport-https
        ca-certificates psmisc openssh-client curl wget python supervisor
        iptables socat ifupdown locales isc-dhcp-client net-tools iproute
        linux-image-$$arch qemu-kvm linux-image-amd64 net-tools bridge-utils
        uml-utilities perl perl-base build-essential taktuk libdbi-perl
        libsort-versions-perl libdbd-pg-perl postgresql-client inetutils-ping
  # Configuration
  - system_config:
    - locales: fr_FR en_US
    - lang: fr_FR.UTF-8
    - timezone: Europe/Paris
  - create_user:
    - name: $$user_name
    - group: $$user_name
    - password: $$user_name
  - oarcluster_custom_image

#== Export the generated appliance in the format of your choice
export:
  - commit_docker_container:
    - container: $(cat MAIN_CONTAINER_ID)
    - image: oarcluster/base
