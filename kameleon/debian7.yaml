#==============================================================================
# vim: softtabstop=2 shiftwidth=2 expandtab fenc=utf-8 cc=81 tw=80
#==============================================================================
#
# DESCRIPTION: Debian wheezy image for docker built with docker.
#
#==============================================================================
---
aliases: defaults.yaml

checkpoint: docker.yaml

# Custom shell environement (this files are located in steps/env/ directory)
env:
  - bashrc
  - functions.sh

# Global variables use by Kameleon engine and the steps
global:
  ## User varibales : used by the recipe
  user_name: docker
  user_password: $$user_name

  # Distribution
  distrib: debian
  release: wheezy
  arch: amd64
  kernel_arch: $$arch
  hostname: oardocker-$${distrib}-$${release}

  rootfs: $$kameleon_cwd/rootfs

  # Docker options
  docker_dns: 208.67.222.222
  docker_image: oardocker/$$kameleon_recipe_name
  docker_hostname: $$kameleon_recipe_name

  # System variables. Required by kameleon engine
  # Include specific steps
  include_steps:
    - $$distrib/$$release
    - $$distrib

  # Apt recipe options
  apt_repository: http://ftp.debian.org/debian/
  apt_enable_contrib: true
  apt_enable_nonfree: true

  out_context:
    cmd: bash
    workdir: $$kameleon_cwd
    proxy_cache: localhost

  # Shell session that allows us to connect to the building machine in order to
  # configure it and setup additional programs
  ssh_config_file: $$kameleon_cwd/ssh_config
  in_context:
    cmd: LC_ALL=POSIX ssh -F $$ssh_config_file $$kameleon_recipe_name -t /bin/bash
    workdir: /root/kameleon_workdir
    proxy_cache: 172.17.42.1

  bootstrap_packages: >
    bsdutils ca-certificates perl perl-modules locales man-db less
    libui-dialog-perl dialog isc-dhcp-client ifupdown iptables iputils-ping
    iproute netbase net-tools psmisc openssh-server

  core_packages: >
    debian-keyring sudo less vim nano bash-completion bzip2 dialog
    apt-transport-https ca-certificates psmisc openssh-client curl wget
    python python3 locales net-tools iproute perl perl-base build-essential
    taktuk libdbi-perl libsort-versions-perl libdbd-pg-perl
    postgresql-client inetutils-ping rsyslog git tmux/wheezy-backports
    openssh-server netcat unionfs-fuse procps python-pip rsync libdatetime-perl
    socat python-psutil python-psycopg2 python3-psycopg2

  frontend_dependencie: >
    libsort-naturally-perl libjson-perl libyaml-perl libappconfig-perl
    libtie-ixhash-perl libwww-perl apache2 apache2-mpm-prefork
    libcgi-fast-perl libapache2-mod-fastcgi php5 libapache2-mod-php5
    php5-mcrypt php5-pgsql phppgadmin libjs-jquery ruby-rspec
    librestclient-ruby apache2-suexec pidentd

  server_packages: >
    postgresql

# Bootstrap the new system and create the 'in_context'
bootstrap:
  - debootstrap:
    - include_pkg: apt-utils $$bootstrap_packages
    - release: $$release
    - arch: $$arch
    - repository: http://ftp.debian.org/debian/
    - variant: default  # default|minbase|buildd|fakechroot|scratchbox
  - prepare_docker
  - start_docker


setup:
  - configure_apt:
    - repository: $$apt_repository
    - enable_contrib_repo: $$apt_enable_contrib
    - enable_nonfree_repo: $$apt_enable_nonfree
  - upgrade_system:
    - dist_upgrade: true
  # Packages installation
  - install_software:
    - packages: $$core_packages
  - install_software:
    - packages: $$frontend_dependencie
  - install_software:
    - packages: $$server_packages
  # Configuration
  - configure_system:
    - locales: fr_FR en_US
    - lang: fr_FR.UTF-8
    - timezone: Europe/Paris
  - oardocker_custom_image

#== Export the generated appliance in the format of your choice
export:
  - save_docker_appliance:
    - commit:
      - exec_out: docker export $(cat MAIN_CONTAINER_ID) | docker import - $$docker_image:$$version
